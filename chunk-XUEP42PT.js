import{Q as h,R as y,S as s,T as g,U as C,V as E,Y as T,Z as w,_ as u,aa as A,ba as I}from"./chunk-EVOHVUKJ.js";import{Tc as p,a as S,b as l,ka as f}from"./chunk-MTQVXK5S.js";var a={entity:void 0,collection:"stations",selectId:o=>o.id};var q=g({providedIn:"root"},I(a),C(({stationsEntities:o,stationsEntityMap:c})=>({locations:p(()=>o().map(({city:e,latitude:t,longitude:n})=>({location:[t,n],label:e}))),getConnectedStations:p(()=>{let e=c();return t=>t?e[t].connectedTo.map(d=>e[d.id]):o()}),getStationsByIds:p(()=>e=>e.map(t=>c()[t]))})),E((o,c=f(y),e=f(h))=>({async getStations(){if(!o.stationsIds().length){let t=await c.loadStations();s(o,u(t,a))}},async deleteStation(t){await c.deleteStation(t).then(()=>{s(o,T(t,a)),this.deleteStationFromConnected(t)}).catch(n=>e.displayError(n))},async addStation(t){await c.postStation(t).then(n=>{s(o,w(n,a)),this.addStationToConnected(n)}).catch(n=>e.displayError(n))},deleteStationFromConnected(t){let m=o.stationsEntities().map(d=>{let i=d.connectedTo.filter(r=>r.id!==t);return l(S({},d),{connectedTo:i})});s(o,u(m,a))},addStationToConnected(t){let n=o.stationsEntityMap(),d=t.connectedTo.map(i=>n[i.id]).map(i=>{let r=[...i.connectedTo,{id:t.id}];return l(S({},i),{connectedTo:r})});s(o,A(i=>d.find(x=>x.id===i.id)??i,a))}})));export{q as a};
